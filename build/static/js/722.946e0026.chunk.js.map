{"version":3,"file":"static/js/722.946e0026.chunk.js","mappings":"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","sources":["components/公众科普/index.tsx","utility/constant.ts"],"sourcesContent":["import {\r\n  Avatar,\r\n  Card,\r\n  FloatButton,\r\n  Input,\r\n  InputRef,\r\n  Modal,\r\n  notification,\r\n} from \"antd\";\r\nimport React, {\r\n  ChangeEvent,\r\n  Fragment,\r\n  MutableRefObject,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { LikeOutlined, DislikeOutlined, FormOutlined } from \"@ant-design/icons\";\r\nimport Meta from \"antd/es/card/Meta\";\r\nimport { useLoaderData, useLocation, useNavigate } from \"react-router-dom\";\r\nimport TextArea, { TextAreaRef } from \"antd/es/input/TextArea\";\r\nimport { putPublicJson, putTopicContent } from \"@/utility/http\";\r\nimport { useAppSelector } from \"@/store/hooks\";\r\nimport { isChinese } from \"@/utility/constant\";\r\nimport { popular } from \"@/utility/new.type\";\r\n\r\nconst App: React.FC = () => {\r\n  const [likeNumber, setLikeNumber] = useState<[number, number]>([0, 0]);\r\n  const [api, contextHolder] = notification.useNotification();\r\n  /*用于判断是否可以编辑*/\r\n  const { userId } = useAppSelector((state) => state.login.doth);\r\n  /*路由跳转*/\r\n  const navigate = useNavigate();\r\n  /*获取路由参数*/\r\n  //需要上传的路由参数\r\n  const only = useRef<any>(\"\");\r\n  const title = useRef<any>();\r\n  const describe = useRef<any>();\r\n  const paragraph = useRef<any>();\r\n  /* loading or not*/\r\n  const [loading, setLoading] = useState(false);\r\n  //显示的json\r\n  const [json, setJson] = useState<popular.json[]>(\r\n    useLoaderData() as popular.json[]\r\n  );\r\n  //模态框\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  /*显示模态框*/\r\n  const showModal = () => {\r\n    setIsModalOpen(true);\r\n    // console.log('模态框被打开')\r\n  };\r\n  useEffect(() => {\r\n    console.log(json);\r\n  }, []);\r\n  /** 点击确定 */\r\n  const handleOk = async () => {\r\n    const {\r\n      current: {\r\n        input: { value: topic },\r\n      },\r\n    } = title;\r\n    const {\r\n      current: {\r\n        resizableTextArea: {\r\n          textArea: { value: description },\r\n        },\r\n      },\r\n    } = describe;\r\n    const {\r\n      current: {\r\n        resizableTextArea: {\r\n          textArea: { value: content },\r\n        },\r\n      },\r\n    } = paragraph;\r\n    if (topic == \"\" || content == \"\") {\r\n      api.open({ message: \"标题或内容不能为空！！！\" });\r\n    } else if (isPut(topic) && isPut(content) && isPut(description)) {\r\n      setLoading(true);\r\n      const res = await putTopicContent({\r\n        userId,\r\n        topic,\r\n        description,\r\n        content,\r\n      });\r\n      if (res.statusCode == 200) {\r\n        const result = await fetch(res.result.path).then((response) =>\r\n          response.json()\r\n        );\r\n        setJson(result);\r\n        await new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n            setIsModalOpen(false);\r\n          }, 1000);\r\n        });\r\n      }\r\n    } else {\r\n      api.error({ message: \"你现在在乱输内容！！！\" });\r\n    }\r\n  };\r\n  /*判断是不是属于能发布的内容*/\r\n  function isPut(values: string): boolean {\r\n    let chCount = 0;\r\n    for (let value of values)\r\n      chCount = isChinese(value) ? chCount + 1 : chCount;\r\n    return chCount >= values.length / 2;\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  /*模态框*/\r\n  const [badge, setBadge] = useState(0);\r\n  /*  点赞 */\r\n  const outlined = (onlyKey: String, index: number) => {\r\n    only.current = onlyKey;\r\n    let result: popular.json[] = [];\r\n    switch (index) {\r\n      case 1:\r\n        result = json.map((item) => {\r\n          if (item.onlyKey == onlyKey && likeNumber[0] < 10) {\r\n            item.like++;\r\n            likeNumber[0]++;\r\n            setLikeNumber([...likeNumber]);\r\n          }\r\n          return item;\r\n        });\r\n        break;\r\n      case 2:\r\n        result = json.map((item) => {\r\n          if (item.onlyKey == onlyKey && likeNumber[1] < 10) {\r\n            item.dislike++;\r\n            likeNumber[1]++;\r\n            setLikeNumber([...likeNumber]);\r\n          }\r\n          return item;\r\n        });\r\n        break;\r\n    }\r\n\r\n    setJson(result);\r\n  };\r\n  useEffect(() => {\r\n    putPublicJson(only.current, json).then((res) => res.result);\r\n  }, [json]);\r\n  /* 记录输入框变换*/\r\n  const change = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    // console.log(e.target.value)\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {contextHolder}\r\n      <Modal\r\n        afterClose={() => {\r\n          setLoading(false);\r\n        }}\r\n        className=\"\"\r\n        confirmLoading={loading}\r\n        cancelText={\"取消\"}\r\n        okText={\"确认输入\"}\r\n        okType={\"danger\"}\r\n        title={<span className=\"text-zinc-600\">写入你的内容</span>}\r\n        open={isModalOpen}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Input\r\n          className=\"border-0   f-0 rounded-none border-b border-b-purple-300 \"\r\n          ref={title}\r\n          onChange={change}\r\n          placeholder=\"输入标题\"\r\n        />\r\n        <br />\r\n        <TextArea\r\n          ref={describe}\r\n          onChange={change}\r\n          autoSize={true}\r\n          showCount={true}\r\n          className=\"border-0 line f-0 rounded-none border-b border-b-purple-300 text-gray-400\"\r\n          placeholder=\"输入描述信息\"\r\n        />\r\n        <TextArea\r\n          ref={paragraph}\r\n          onChange={change}\r\n          autoSize={{ minRows: 5 }}\r\n          showCount={true}\r\n          className=\"border-0 line f-0 rounded-none border-b border-b-purple-300 text-gray-400\"\r\n          placeholder=\"输入内容\"\r\n        />\r\n      </Modal>\r\n      <div>\r\n        {userId && (\r\n          <FloatButton\r\n            onClick={showModal}\r\n            badge={{ count: badge == 0 ? null : badge }}\r\n            icon={<FormOutlined />}\r\n            type=\"primary\"\r\n            className=\"top-[100px] right-[24px]\"\r\n          />\r\n        )}\r\n        <div className=\"flex flex-row\">\r\n          <div className=\"pt-[10px] flex flex-row flex-wrap  noSelect justify-start\">\r\n            {json!.map((item: any, index) => (\r\n              <Card\r\n                hoverable\r\n                key={index}\r\n                className=\"min-w-[250px] w-[300px] m-[10px]\"\r\n                cover={\r\n                  <img\r\n                    onClick={() => {\r\n                      navigate(\"/detail/introduce\", {\r\n                        state: {\r\n                          item,\r\n                        },\r\n                      });\r\n                    }}\r\n                    alt=\"example\"\r\n                    src={item.descriptionPath}\r\n                  />\r\n                }\r\n                actions={[\r\n                  <div className={\"select-none\"}>\r\n                    <DislikeOutlined\r\n                      key=\"setting\"\r\n                      onClick={() => outlined(item.onlyKey, 2)}\r\n                    />\r\n                    <span className={\"text-yellow-800 size-12\"}>\r\n                      {item.dislike > 0 ? item.dislike : null}\r\n                    </span>\r\n                  </div>,\r\n                  <div>\r\n                    <LikeOutlined\r\n                      key=\"edit\"\r\n                      onClick={() => outlined(item.onlyKey, 1)}\r\n                    />\r\n                    <span className={\"text-yellow-800 size-12\"}>\r\n                      {item.like > 0 ? item.like : null}\r\n                    </span>\r\n                  </div>,\r\n                ]}\r\n              >\r\n                <div\r\n                  onClick={() => {\r\n                    navigate(\"/detail/introduce\", {\r\n                      state: {\r\n                        item,\r\n                      },\r\n                    });\r\n                  }}\r\n                >\r\n                  <Meta\r\n                    className={\"max-w-[250px]\"}\r\n                    avatar={<Avatar src={item.avatarPath} />}\r\n                    title={item.title}\r\n                    description={item.description}\r\n                  />\r\n                  <br />\r\n                  <span\r\n                    className={\"float-left\"}\r\n                    children={\"作者:\" + item.author}\r\n                  />\r\n                  <span\r\n                    className={\"float-right\"}\r\n                    children={\"发布时间:\" + item.publicDate}\r\n                  />\r\n                </div>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default App;\r\n","export const METHOD_POST = \"post\";\r\n\r\nexport function isChinese(value: string) {\r\n    const re = /[^\\u4E00-\\u9FA5]/;\r\n    return !re.test(value);\r\n\r\n}\r\n\r\nexport function isCount(value: string) {\r\n    const re = /^[A-Za-z0-9]+$/\r\n    return !re.test(value)\r\n}\r\nexport const port=3011\r\n\r\n\r\n"],"names":["App","likeNumber","setLikeNumber","useState","api","contextHolder","notification","useNotification","userId","useAppSelector","state","login","doth","navigate","useNavigate","only","useRef","title","describe","paragraph","loading","setLoading","json","setJson","useLoaderData","isModalOpen","setIsModalOpen","useEffect","console","log","isPut","values","chCount","value","isChinese","length","badge","setBadge","outlined","onlyKey","index","current","result","map","item","like","dislike","putPublicJson","then","res","change","e","_jsxs","Fragment","children","Modal","afterClose","className","confirmLoading","cancelText","okText","okType","_jsx","open","onOk","async","input","topic","resizableTextArea","textArea","description","content","message","putTopicContent","statusCode","fetch","path","response","Promise","resolve","reject","setTimeout","error","onCancel","handleCancel","Input","ref","onChange","placeholder","TextArea","autoSize","showCount","minRows","FloatButton","onClick","showModal","count","icon","FormOutlined","type","Card","hoverable","cover","alt","src","descriptionPath","actions","DislikeOutlined","LikeOutlined","Meta","avatar","Avatar","avatarPath","author","publicDate","test","isCount"],"sourceRoot":""}