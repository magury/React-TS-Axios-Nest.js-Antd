{"version":3,"file":"static/js/141.affd1d5d.chunk.js","mappings":"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","sources":["components/default/index.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Button,\r\n    Cascader, Col,\r\n    DatePicker, Flex,\r\n    Form,\r\n    Input,\r\n    InputNumber,\r\n    Mentions, notification, Popconfirm, Row,\r\n    Select, Space, Switch, Table, TableProps,\r\n    TreeSelect,\r\n} from 'antd';\r\nimport {FrownOutlined, SmileOutlined} from \"@ant-design/icons\";\r\nimport {createDoctor, deleteById, deleteDoctor} from \"@/utility/http\";\r\nimport {useLoaderData} from \"react-router-dom\";\r\n\r\ninterface DataType {\r\n    key: string;\r\n    username: string;\r\n    password: string;\r\n    author: string;\r\n    hospitalName: string;\r\n    depart: string\r\n}\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        // xs: {span: 24},\r\n        // sm: {span: 4},\r\n    },\r\n    wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 14},\r\n    },\r\n};\r\nconst App: React.FC = () => {\r\n    const loader= useLoaderData() as any\r\n    const [columns, setColumns] = useState<TableProps<DataType>['columns']>([\r\n        {\r\n            title: '账号',\r\n            dataIndex: 'username',\r\n        },\r\n        {\r\n            title: '密码',\r\n            dataIndex: 'password',\r\n        },\r\n\r\n        {\r\n            title: '医院名称',\r\n            dataIndex: 'hospitalName',\r\n            filters: loader.filter,\r\n            onFilter: (value: any, record) => record.hospitalName.startsWith(value),\r\n            filterSearch: true,\r\n        },\r\n        {\r\n            title: '医生',\r\n            dataIndex: 'author',\r\n        },\r\n        {\r\n            title: '科室',\r\n            dataIndex: 'depart'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (_, record) => (\r\n                <Space size=\"middle\">\r\n                    <Popconfirm title=\"Sure to delete?\" onConfirm={() => drop(record)}>\r\n                        <a>Delete</a>\r\n                    </Popconfirm>\r\n                </Space>\r\n            ),\r\n        },\r\n    ])\r\n\r\n    const [data, setData] = useState<DataType[]>(loader.data)\r\n    const [api, contextHolder] = notification.useNotification();\r\n    const [hospitals, setHospitals] = useState<Array<{ level: string, value: string }>>(loader.hospital)\r\n    const drop = async (record:DataType) => {\r\n        const body={\r\n            hospitalId:record.key,\r\n            username:record.username\r\n        }\r\n      const res= await deleteDoctor(body)\r\n        if(res.statusCode==200)\r\n        {\r\n            getAll(res)\r\n            success('成功删除了该用户的数据')\r\n        }\r\n\r\n        else\r\n            blunder(res.result.err)\r\n\r\n    }\r\n    const getAll = (json: any) => {\r\n        let result = json.result.map((item: any, index: number) => {\r\n            return {\r\n                key: item.hospitalId,\r\n                username: item.username,\r\n                password: item.password,\r\n                author: item.author,\r\n                hospitalName: item.hospitalName,\r\n                depart: item.depart\r\n            }\r\n        })\r\n        let item = columns![2]\r\n        item.filters = result.map((item: any) => ({text: item.hospitalName, value: item.hospitalName}))\r\n        columns?.splice(2, 1, item)\r\n        let arr = columns?.map((item) => item)\r\n        setColumns(arr)\r\n        setData(result.reverse())\r\n    }\r\n    /* 提交按钮回调,获取所有内容 */\r\n    const finish = async (value: any) => {\r\n        const res = await createDoctor(value)\r\n        if (res.statusCode == 200) {\r\n            success('成功添加该用户信息！')\r\n            getAll(res)\r\n        } else {\r\n            blunder(res.result.err)\r\n        }\r\n    }\r\n    const success = (description: string) => {\r\n        api.open({\r\n            message: '操作成功',\r\n            description,\r\n            icon: <SmileOutlined style={{color: '#108ee9'}}/>,\r\n            placement: 'topLeft'\r\n        })\r\n    }\r\n    const blunder = (description: string) => {\r\n        api.open({\r\n            message: '操作错误',\r\n            description,\r\n            icon: <FrownOutlined style={{color: '#108ee9'}}/>,\r\n            placement: 'topLeft'\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <Form onFinish={finish} className={' grid grid-rows-2 grid-cols-3'} {...formItemLayout} variant=\"filled\">\r\n                {contextHolder}\r\n                <Form.Item validateFirst={true} label=\"账号\" name=\"username\"\r\n                           rules={[{required: true, message: '账号不能为空'}, {\r\n                               min: 8,\r\n                               type: \"string\",\r\n                               message: '最短长度不能少于8位'\r\n                           }, {pattern: /^[A-Za-z0-9]+$/, message: '账号只能包含字母和数字'}, {\r\n                               whitespace: true,\r\n                               message: '不能使用空格'\r\n                           }]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item label=\"姓名\" name=\"author\" rules={[{required: true, message: '姓名不能为空!'}]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item label=\"科室\" name=\"depart\" rules={[{required: true, message: '科室不能为空!'}]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item validateFirst={true} label=\"密码\" name=\"password\"\r\n                           rules={[{required: true, message: '密码不能为空'}, {\r\n                               min: 8,\r\n                               type: \"string\",\r\n                               message: '最短长度不能少于8位'\r\n                           }, {pattern: /^[A-Za-z0-9]+$/, message: '密码只能包含字母和数字'}, {\r\n                               whitespace: true,\r\n                               message: '不能使用空格'\r\n                           }]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n                <Form.Item className={'items-start'} initialValue={hospitals[0]} label=\"医院\" name=\"hospital\"\r\n                           rules={[{required: true, message: '医院名称不能为空!'}]}>\r\n                    <Select options={hospitals}/>\r\n                </Form.Item>\r\n                <Form.Item className={'items-start'} wrapperCol={{offset: 4, span: 4}}>\r\n                    <Button className={'w-[200px]'} type=\"primary\" htmlType=\"submit\">\r\n                        创建\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n            <Table className={'border-r-0'} pagination={false} columns={columns} dataSource={data}/>;\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;"],"names":["formItemLayout","labelCol","wrapperCol","xs","span","sm","App","loader","useLoaderData","columns","setColumns","useState","title","dataIndex","filters","filter","onFilter","value","record","hospitalName","startsWith","filterSearch","key","render","_","_jsx","Space","size","children","Popconfirm","onConfirm","drop","data","setData","api","contextHolder","notification","useNotification","hospitals","setHospitals","hospital","async","body","hospitalId","username","res","deleteDoctor","statusCode","getAll","success","blunder","result","err","json","map","item","index","password","author","depart","text","splice","arr","reverse","description","open","message","icon","SmileOutlined","style","color","placement","FrownOutlined","_jsxs","_Fragment","Form","onFinish","createDoctor","className","variant","Item","validateFirst","label","name","rules","required","min","type","pattern","whitespace","Input","initialValue","Select","options","offset","Button","htmlType","Table","pagination","dataSource"],"sourceRoot":""}